diff --git a/node_modules/react-native-reanimated/react-native-reanimated.d.ts b/node_modules/react-native-reanimated/react-native-reanimated.d.ts
index 27b3319..58b44ea 100644
--- a/node_modules/react-native-reanimated/react-native-reanimated.d.ts
+++ b/node_modules/react-native-reanimated/react-native-reanimated.d.ts
@@ -2,7 +2,7 @@
 // TypeScript Version: 2.8
 
 declare module 'react-native-reanimated' {
-  import { ComponentClass, ReactNode, Component } from 'react';
+  import { ComponentClass, ReactNode, Component, RefObject } from 'react';
   import {
     ViewProps,
     TextProps,
@@ -118,11 +118,12 @@ declare module 'react-native-reanimated' {
     export interface TimingState extends AnimationState {
       frameTime: AnimatedValue<number>;
     }
-    export type EasingFunction = (value: Adaptable<number>) => AnimatedNode<number>;
+    export type EasingNodeFunction = (value: Adaptable<number>) => AnimatedNode<number>;
+    export type EasingFunction = (value: number) => number;
     export interface TimingConfig {
       toValue: Adaptable<number>;
       duration: Adaptable<number>;
-      easing: EasingFunction;
+      easing: EasingNodeFunction;
     }
 
     export type SpringState = PhysicsAnimationState;
@@ -136,8 +137,15 @@ declare module 'react-native-reanimated' {
       restDisplacementThreshold: Adaptable<number>;
       toValue: Adaptable<number>;
     }
-    export interface WithSpringConfig extends Omit<SpringConfig, 'toValue'> {
-      velocity: number
+
+    export interface WithSpringConfig {
+      damping?: number;
+      mass?: number;
+      stiffness?: number;
+      overshootClamping?: boolean;
+      restSpeedThreshold?: number;
+      restDisplacementThreshold?: number;
+      velocity?: number;
     }
 
     interface SpringConfigWithOrigamiTensionAndFriction {
@@ -199,6 +207,7 @@ declare module 'react-native-reanimated' {
     type CodeProps = {
       exec?: AnimatedNode<number>
       children?: () => AnimatedNode<number>
+      dependencies?: Array<any>
     };
 
     // components
@@ -255,39 +264,9 @@ declare module 'react-native-reanimated' {
     export const neq: BinaryOperator<0 | 1>;
     export const and: MultiOperator<0 | 1>;
     export const or: MultiOperator<0 | 1>;
-    export function proc<P1>(
-      cb: (p1: P1) => AnimatedNode<number>
-    ): typeof cb;
-    export function proc<P1, P2>(
-      cb: (p1: P1, p2: P2) => AnimatedNode<number>
-    ): typeof cb;
-    export function proc<P1, P2, P3>(
-      cb: (p1: P1, p2: P2, p3: P3) => AnimatedNode<number>
-    ): typeof cb;
-    export function proc<P1, P2, P3, P4>(
-      cb: (p1: P1, p2: P2, p3: P3, p4: P4) => AnimatedNode<number>
-    ): typeof cb;
-    export function proc<P1, P2, P3, P4, P5>(
-      cb: (p1: P1, p2: P2, p3: P3, p4: P4, p5: P5) => AnimatedNode<number>
-    ): typeof cb;
-    export function proc<P1, P2, P3, P4, P5, P6>(
-      cb: (p1: P1, p2: P2, p3: P3, p4: P4, p5: P5, p6: P6) => AnimatedNode<number>
-    ): typeof cb;
-    export function proc<P1, P2, P3, P4, P5, P6, P7>(
-      cb: (p1: P1, p2: P2, p3: P3, p4: P4, p5: P5, p6: P6, p7: P7) => AnimatedNode<number>
-    ): typeof cb;
-    export function proc<P1, P2, P3, P4, P5, P6, P7, P8>(
-      cb: (p1: P1, p2: P2, p3: P3, p4: P4, p5: P5, p6: P6, p7: P7, p8: P8) => AnimatedNode<number>
-    ): typeof cb;
-    export function proc<P1, P2, P3, P4, P5, P6, P7, P8, P9>(
-      cb: (p1: P1, p2: P2, p3: P3, p4: P4, p5: P5, p6: P6, p7: P7, p8: P8, p9: P9) => AnimatedNode<number>
-    ): typeof cb;
-    export function proc<P1, P2, P3, P4, P5, P6, P7, P8, P9, P10>(
-      cb: (p1: P1, p2: P2, p3: P3, p4: P4, p5: P5, p6: P6, p7: P7, p8: P8, p9: P9, p10: P10) => AnimatedNode<number>
-    ): typeof cb;
-    export function proc(
-      cb: (...params: Adaptable<number>[]) => AnimatedNode<number>
-    ): typeof cb;
+    export function proc<T extends (Adaptable<Value> | undefined)[]>(
+      func: (...args: T) => AnimatedNode<number>
+    ): typeof func;
     export function defined(value: Adaptable<any>): AnimatedNode<0 | 1>;
     export function not(value: Adaptable<any>): AnimatedNode<0 | 1>;
     export function set<T extends Value>(
@@ -401,9 +380,13 @@ declare module 'react-native-reanimated' {
     ): BackwardCompatibleWrapper;
 
     // reanimated2 animations                   
+    export interface WithTimingConfig {
+      duration: number;
+      easing: EasingFunction;
+    }
     export function withTiming(
       toValue: number,
-      userConfig?: Omit<TimingConfig, 'toValue'>,
+      userConfig?: WithTimingConfig,
       callback?: (isCancelled: boolean) => void,
     ): number;
     export function withSpring(
@@ -460,18 +443,29 @@ declare module 'react-native-reanimated' {
     export function useAnimatedGestureHandler<TContext extends Context>(
       handlers: GestureHandlers<TContext>
     ): OnGestureEvent;
-    export function useAnimatedScrollHandler(
-      handler: ScrollHandler
+    export function useAnimatedScrollHandler<TContext extends Context>(
+      handler: ScrollHandler<TContext>
     ): OnScroll;
-    export function useAnimatedScrollHandler(
-      handlers: ScrollHandlers
+    export function useAnimatedScrollHandler<TContext extends Context>(
+      handlers: ScrollHandlers<TContext>
     ): OnScroll;
 
+    export function useAnimatedRef<T extends Component>(): RefObject<T>;
+    export function measure<T extends Component>(ref: RefObject<T>): {
+      width: number;
+      height: number;
+      x: number;
+      y: number;
+      pageX: number;
+      pageY: number;
+    };
+
+    export function scrollTo(ref: RefObject<ReactNativeScrollView | ScrollView>, x: number, y: number, animated: boolean): void;
+
     // gesture-handler
     type OnGestureEvent = (event: PanGestureHandlerGestureEvent) => void;
 
-    // @TODO: refactor this once worklet parse Typescript syntax
-    type Context = { [key: string]: any };
+    type Context = Record<string, unknown>;
 
     type NativeEvent = GestureHandlerGestureEventNativeEvent & PanGestureHandlerEventExtra;
     type Handler<TContext extends Context> = (event: NativeEvent, context: TContext) => void;
@@ -488,14 +482,14 @@ declare module 'react-native-reanimated' {
     // scroll view
     type OnScroll = (event: NativeSyntheticEvent<NativeScrollEvent>) => void;
 
-    type ScrollHandler = (event: NativeScrollEvent) => void;
+    type ScrollHandler<TContext extends Context> = (event: NativeScrollEvent, context: TContext) => void;
 
-    export interface ScrollHandlers {
-      onScroll?:ScrollHandler;
-      onBeginDrag?:ScrollHandler;
-      onEndDrag?: ScrollHandler;
-      onMomentumBegin?: ScrollHandler;
-      onMomentumEnd?: ScrollHandler;
+    export interface ScrollHandlers<TContext extends Context> {
+      onScroll?:ScrollHandler<TContext>;
+      onBeginDrag?:ScrollHandler<TContext>;
+      onEndDrag?: ScrollHandler<TContext>;
+      onMomentumBegin?: ScrollHandler<TContext>;
+      onMomentumEnd?: ScrollHandler<TContext>;
     }
 
     // configuration
@@ -505,17 +499,42 @@ declare module 'react-native-reanimated' {
 
   export default Animated;
 
+  interface EasingNodeStatic {
+    linear: Animated.EasingNodeFunction;
+    ease: Animated.EasingNodeFunction;
+    quad: Animated.EasingNodeFunction;
+    cubic: Animated.EasingNodeFunction;
+    poly(n: Animated.Adaptable<number>): Animated.EasingNodeFunction;
+    sin: Animated.EasingNodeFunction;
+    circle: Animated.EasingNodeFunction;
+    exp: Animated.EasingNodeFunction;
+    elastic(bounciness?: Animated.Adaptable<number>): Animated.EasingNodeFunction;
+    back(s?: Animated.Adaptable<number>): Animated.EasingNodeFunction;
+    bounce: Animated.EasingNodeFunction;
+    bezier(
+      x1: number,
+      y1: number,
+      x2: number,
+      y2: number,
+    ): Animated.EasingNodeFunction;
+    in(easing: Animated.EasingNodeFunction): Animated.EasingNodeFunction;
+    out(easing: Animated.EasingNodeFunction): Animated.EasingNodeFunction;
+    inOut(easing: Animated.EasingNodeFunction): Animated.EasingNodeFunction;
+  }
+  
+  export const EasingNode: EasingNodeStatic;
+
   interface EasingStatic {
     linear: Animated.EasingFunction;
     ease: Animated.EasingFunction;
     quad: Animated.EasingFunction;
     cubic: Animated.EasingFunction;
-    poly(n: Animated.Adaptable<number>): Animated.EasingFunction;
+    poly(n: number): Animated.EasingFunction;
     sin: Animated.EasingFunction;
     circle: Animated.EasingFunction;
     exp: Animated.EasingFunction;
-    elastic(bounciness?: Animated.Adaptable<number>): Animated.EasingFunction;
-    back(s?: Animated.Adaptable<number>): Animated.EasingFunction;
+    elastic(bounciness?: number): Animated.EasingFunction;
+    back(s?: number): Animated.EasingFunction;
     bounce: Animated.EasingFunction;
     bezier(
       x1: number,
@@ -527,7 +546,8 @@ declare module 'react-native-reanimated' {
     out(easing: Animated.EasingFunction): Animated.EasingFunction;
     inOut(easing: Animated.EasingFunction): Animated.EasingFunction;
   }
-  export const EasingNode: EasingStatic;
+  
+  export const Easing: EasingStatic;
 
   export interface TransitioningViewProps extends ViewProps {
     transition: ReactNode;
@@ -627,6 +647,9 @@ declare module 'react-native-reanimated' {
   export const useDerivedValue: typeof Animated.useDerivedValue
   export const useAnimatedGestureHandler: typeof Animated.useAnimatedGestureHandler
   export const useAnimatedScrollHandler: typeof Animated.useAnimatedScrollHandler
+  export const useAnimatedRef: typeof Animated.useAnimatedRef
+  export const measure: typeof Animated.measure
+  export const scrollTo: typeof Animated.scrollTo
   export const withTiming: typeof Animated.withTiming
   export const withSpring: typeof Animated.withSpring
   export const withDecay: typeof Animated.withDecay
